---
description: 
globs: 
alwaysApply: false
---
# 🎯 CODE TEMPLATES & GENERATORS

## 📄 FEATURE GENERATION TEMPLATES

### 1. Feature Index (index.ts):
```typescript
/*
TEMPLATE: feature-index
USAGE: Create feature export hub
LOCATION: src/{public|admin}/features/[feature-name]/index.ts
*/

// ✅ Pages
export { 
  {{FeatureName}}ListPage, 
  {{FeatureName}}DetailPage, 
  {{FeatureName}}CreatePage,
  {{FeatureName}}EditPage 
} from './pages';

// ✅ Components
export { 
  {{FeatureName}}Table, 
  {{FeatureName}}Form, 
  {{FeatureName}}Card,
  {{FeatureName}}Filter 
} from './components';

// ✅ Hooks
export { 
  use{{FeatureName}}s, 
  use{{FeatureName}}, 
  useCreate{{FeatureName}}, 
  useUpdate{{FeatureName}},
  useDelete{{FeatureName}}
} from './hooks';

// ✅ Services
export { {{featureName}}Api } from './services';

// ✅ Types
export type { 
  {{FeatureName}}, 
  {{FeatureName}}FormData, 
  {{FeatureName}}Filters,
  {{FeatureName}}Params 
} from './types';

// ✅ Router
export { default as {{FeatureName}}Router } from './router';
```

### 2. Feature Router (router.tsx):
```tsx
/*
TEMPLATE: feature-router
USAGE: Create feature-specific router
LOCATION: src/{public|admin}/features/[feature-name]/router.tsx
*/

import { Routes, Route } from 'react-router-dom';
import { ErrorBoundary } from 'shared/components';
import { ProtectedRoute } from 'shared/guards';
import { 
  {{FeatureName}}ListPage, 
  {{FeatureName}}DetailPage, 
  {{FeatureName}}CreatePage,
  {{FeatureName}}EditPage 
} from './pages';

export default function {{FeatureName}}Router() {
  return (
    <ErrorBoundary fallback={ErrorFallback}>
      <Routes>
        {/* Danh sách {{featureName}} */}
        <Route path="/" element={<{{FeatureName}}ListPage />} />
        
        {/* Tạo mới {{featureName}} */}
        <Route 
          path="/create" 
          element={
            <ProtectedRoute requirePermission="{{featureName}}:create">
              <{{FeatureName}}CreatePage />
            </ProtectedRoute>
          } 
        />
        
        {/* Chi tiết {{featureName}} */}
        <Route path="/:id" element={<{{FeatureName}}DetailPage />} />
        
        {/* Chỉnh sửa {{featureName}} */}
        <Route 
          path="/:id/edit" 
          element={
            <ProtectedRoute requirePermission="{{featureName}}:update">
              <{{FeatureName}}EditPage />
            </ProtectedRoute>
          } 
        />
      </Routes>
    </ErrorBoundary>
  );
}
```

### 3. Page Component Template:
```tsx
/*
TEMPLATE: page-component
USAGE: Create standardized page component
LOCATION: src/{public|admin}/features/[feature-name]/pages/
*/

import React from 'react';
import { ErrorBoundary } from 'shared/components';
import { LoadingSpinner } from 'shared/components/ui';
import { use{{FeatureName}}s } from '../hooks';

interface {{FeatureName}}PageProps {
  // Define props if needed
}

/**
 * {{FeatureName}} Page Component
 * 
 * @description Trang hiển thị danh sách {{featureName}}
 * @author Generated by template
 */
export default function {{FeatureName}}Page(props: {{FeatureName}}PageProps) {
  // ✅ 1. Hooks
  const { data, isLoading, error } = use{{FeatureName}}s();
  
  // ✅ 2. Early returns
  if (isLoading) return <LoadingSpinner />;
  if (error) throw error; // Let ErrorBoundary catch

  return (
    <ErrorBoundary fallback={ErrorFallback}>
      <div className="container mx-auto py-6">
        <h1 className="text-2xl font-bold mb-6">{{FeatureName}} Management</h1>
        
        {/* Content */}
        <div className="space-y-6">
          {/* Add your content here */}
        </div>
      </div>
    </ErrorBoundary>
  );
}
```

### 4. API Service Template:
```typescript
/*
TEMPLATE: api-service
USAGE: Create standardized API service
LOCATION: src/{public|admin}/features/[feature-name]/services/
*/

import { api } from 'shared/lib/api';
import type { 
  {{FeatureName}}, 
  {{FeatureName}}FormData, 
  {{FeatureName}}Params 
} from '../types';

/**
 * {{FeatureName}} API Service
 * 
 * @description Xử lý tất cả API calls liên quan đến {{featureName}}
 * @author Generated by template
 */
export const {{featureName}}Api = {
  /**
   * Lấy danh sách {{featureName}}
   */
  getAll: async (params?: {{FeatureName}}Params): Promise<{{FeatureName}}[]> => {
    const response = await api.get('/{{featureName}}s', { params });
    return response.data;
  },
  
  /**
   * Lấy {{featureName}} theo ID
   */
  getById: async (id: string): Promise<{{FeatureName}}> => {
    const response = await api.get(`/{{featureName}}s/${id}`);
    return response.data;
  },
  
  /**
   * Tạo mới {{featureName}}
   */
  create: async (data: {{FeatureName}}FormData): Promise<{{FeatureName}}> => {
    const response = await api.post('/{{featureName}}s', data);
    return response.data;
  },
  
  /**
   * Cập nhật {{featureName}}
   */
  update: async (id: string, data: Partial<{{FeatureName}}FormData>): Promise<{{FeatureName}}> => {
    const response = await api.put(`/{{featureName}}s/${id}`, data);
    return response.data;
  },
  
  /**
   * Xóa {{featureName}}
   */
  delete: async (id: string): Promise<void> => {
    await api.delete(`/{{featureName}}s/${id}`);
  }
};
```

### 5. React Query Hooks Template:
```typescript
/*
TEMPLATE: react-query-hooks
USAGE: Create standardized React Query hooks
LOCATION: src/{public|admin}/features/[feature-name]/hooks/
*/

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { toast } from 'shared/hooks/use-toast';
import { {{featureName}}Api } from '../services';
import type { 
  {{FeatureName}}, 
  {{FeatureName}}FormData, 
  {{FeatureName}}Params 
} from '../types';

/**
 * Hook lấy danh sách {{featureName}}
 */
export const use{{FeatureName}}s = (params?: {{FeatureName}}Params) => {
  return useQuery({
    queryKey: ['{{featureName}}s', params],
    queryFn: () => {{featureName}}Api.getAll(params),
    throwOnError: true, // Let ErrorBoundary catch
    retry: (failureCount, error) => {
      // Don't retry on 4xx errors
      if (error.response?.status >= 400 && error.response?.status < 500) {
        return false;
      }
      return failureCount < 3;
    },
    meta: { errorMessage: 'Không thể tải danh sách {{featureName}}' }
  });
};

/**
 * Hook lấy {{featureName}} theo ID
 */
export const use{{FeatureName}} = (id: string) => {
  return useQuery({
    queryKey: ['{{featureName}}', id],
    queryFn: () => {{featureName}}Api.getById(id),
    enabled: !!id,
    throwOnError: true,
    meta: { errorMessage: 'Không thể tải thông tin {{featureName}}' }
  });
};

/**
 * Hook tạo mới {{featureName}}
 */
export const useCreate{{FeatureName}} = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: {{featureName}}Api.create,
    onSuccess: (data) => {
      // Invalidate and refetch
      queryClient.invalidateQueries({ queryKey: ['{{featureName}}s'] });
      toast.success('Tạo {{featureName}} thành công!');
    },
    onError: (error) => {
      toast.error(error.message || 'Có lỗi xảy ra khi tạo {{featureName}}');
    },
    throwOnError: false // Handle locally in forms
  });
};

/**
 * Hook cập nhật {{featureName}}
 */
export const useUpdate{{FeatureName}} = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ id, data }: { id: string; data: Partial<{{FeatureName}}FormData> }) =>
      {{featureName}}Api.update(id, data),
    onSuccess: (data) => {
      // Update specific cache entries
      queryClient.setQueryData(['{{featureName}}', data.id], data);
      queryClient.invalidateQueries({ queryKey: ['{{featureName}}s'] });
      toast.success('Cập nhật {{featureName}} thành công!');
    },
    onError: (error) => {
      toast.error(error.message || 'Có lỗi xảy ra khi cập nhật {{featureName}}');
    },
    throwOnError: false
  });
};

/**
 * Hook xóa {{featureName}}
 */
export const useDelete{{FeatureName}} = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: {{featureName}}Api.delete,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['{{featureName}}s'] });
      toast.success('Xóa {{featureName}} thành công!');
    },
    onError: (error) => {
      toast.error(error.message || 'Có lỗi xảy ra khi xóa {{featureName}}');
    },
    throwOnError: false
  });
};
```

### 6. Form Component Template:
```tsx
/*
TEMPLATE: form-component
USAGE: Create standardized form component
LOCATION: src/{public|admin}/features/[feature-name]/components/
*/

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from 'shared/components/ui/form';
import { Button } from 'shared/components/ui/button';
import { Input } from 'shared/components/ui/input';
import { Alert, AlertDescription } from 'shared/components/ui/alert';
import { AlertTriangle } from 'lucide-react';
import { useCreate{{FeatureName}} } from '../hooks';
import type { {{FeatureName}}FormData } from '../types';

// ✅ Validation schema
const {{featureName}}Schema = z.object({
  name: z.string().min(1, 'Tên là bắt buộc'),
  description: z.string().optional(),
  // Add more fields as needed
});

interface {{FeatureName}}FormProps {
  onSubmit?: (data: {{FeatureName}}FormData) => void;
  defaultValues?: Partial<{{FeatureName}}FormData>;
  isEdit?: boolean;
}

/**
 * {{FeatureName}} Form Component
 * 
 * @description Form để tạo/chỉnh sửa {{featureName}}
 * @author Generated by template
 */
export function {{FeatureName}}Form({ 
  onSubmit, 
  defaultValues, 
  isEdit = false 
}: {{FeatureName}}FormProps) {
  const form = useForm<{{FeatureName}}FormData>({
    resolver: zodResolver({{featureName}}Schema),
    defaultValues: defaultValues || {}
  });

  const createMutation = useCreate{{FeatureName}}();
  const [submitError, setSubmitError] = useState<string | null>(null);

  const handleSubmit = async (data: {{FeatureName}}FormData) => {
    try {
      setSubmitError(null);
      await createMutation.mutateAsync(data);
      onSubmit?.(data);
    } catch (error) {
      setSubmitError(error instanceof Error ? error.message : 'Có lỗi xảy ra');
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
        {/* Error Alert */}
        {submitError && (
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{submitError}</AlertDescription>
          </Alert>
        )}

        {/* Name Field */}
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Tên {{FeatureName}}</FormLabel>
              <FormControl>
                <Input placeholder="Nhập tên {{featureName}}" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Description Field */}
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Mô tả</FormLabel>
              <FormControl>
                <Input placeholder="Nhập mô tả" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Submit Button */}
        <Button 
          type="submit" 
          disabled={createMutation.isPending}
          className="w-full"
        >
          {createMutation.isPending 
            ? 'Đang lưu...' 
            : isEdit ? 'Cập nhật' : 'Tạo mới'
          }
        </Button>
      </form>
    </Form>
  );
}
```

### 7. TypeScript Types Template:
```typescript
/*
TEMPLATE: typescript-types
USAGE: Create standardized TypeScript interfaces
LOCATION: src/{public|admin}/features/[feature-name]/types/
*/

/**
 * {{FeatureName}} Entity
 * 
 * @description Main entity interface cho {{featureName}}
 */
export interface {{FeatureName}} {
  id: string;
  name: string;
  description?: string;
  createdAt: string;
  updatedAt: string;
  // Add more fields as needed
}

/**
 * {{FeatureName}} Form Data
 * 
 * @description Data structure cho form tạo/chỉnh sửa {{featureName}}
 */
export interface {{FeatureName}}FormData {
  name: string;
  description?: string;
  // Add more fields as needed
}

/**
 * {{FeatureName}} Filters
 * 
 * @description Filters cho tìm kiếm/lọc {{featureName}}
 */
export interface {{FeatureName}}Filters {
  search?: string;
  status?: string;
  // Add more filters as needed
}

/**
 * {{FeatureName}} Query Params
 * 
 * @description Parameters cho API calls
 */
export interface {{FeatureName}}Params extends {{FeatureName}}Filters {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

/**
 * {{FeatureName}} Store State
 * 
 * @description Zustand store state interface
 */
export interface {{FeatureName}}Store {
  selectedItems: string[];
  filters: {{FeatureName}}Filters;
  setSelectedItems: (items: string[]) => void;
  setFilters: (filters: {{FeatureName}}Filters) => void;
  clearFilters: () => void;
}
```

## 🚀 USAGE INSTRUCTIONS

### Template Variables:
- `{{FeatureName}}` - PascalCase (e.g., "UserProfile")
- `{{featureName}}` - camelCase (e.g., "userProfile")
- `{{feature-name}}` - kebab-case (e.g., "user-profile")

### Generation Process:
1. Copy template
2. Replace all `{{variables}}` with actual feature names
3. Adjust fields/props according to business requirements
4. Follow folder structure exactly as specified

### Example Usage:
For a "Product" feature:
- `{{FeatureName}}` → `Product`
- `{{featureName}}` → `product`
- `{{feature-name}}` → `product`

This creates: ProductListPage, useProducts, productApi, etc.

